apply plugin: 'java'
apply plugin: 'eclipse' 
apply plugin: 'maven' 
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.6.2.201302030002"
    reportsDir = file("$buildDir/JacocoReportDir")
}

archivesBaseName = 'neverwinterdp'

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

eclipse {
  project {
    name = 'NeverwinterDP'
  }

  classpath {
    downloadSources=true
  }
}

eclipse.classpath.defaultOutputDir = file( 'build/classes' )

group = 'com.neverwinterdp'
sourceCompatibility = 1.7
version = '1.0-SNAPSHOT'
configurations.compile.transitive = true

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url "http://clojars.org/repo"
  }
}

configurations.all {
  exclude(group: 'ring', name: 'ring-core', version: '0.3.11')
}

dependencies {
  compile group: 'com.neverwinterdp', name: 'commons.utils', version: '1.0-SNAPSHOT'
  compile group: 'com.neverwinterdp', name: 'commons.buffer', version: '1.0-SNAPSHOT'
  compile group: 'com.neverwinterdp', name: 'commons.yara.core', version: '1.0-SNAPSHOT'
  compile group: 'com.neverwinterdp', name: 'commons.yara.server', version: '1.0-SNAPSHOT'
  compile group: 'com.neverwinterdp', name: 'commons.api', version: '1.0-SNAPSHOT'
  compile group: 'com.neverwinterdp', name: 'commons.cluster', version: '1.0-SNAPSHOT'
  compile group: 'com.neverwinterdp', name: 'commons.cluster', version: '1.0-SNAPSHOT', classifier: 'js'
  compile group: 'com.neverwinterdp', name: 'commons.api', version: '1.0-SNAPSHOT'
  compile group: 'com.neverwinterdp', name: 'commons.hadoop-framework', version: '1.0-SNAPSHOT'
  compile group: 'com.neverwinterdp', name: 'commons.zookeeper', version: '1.0-SNAPSHOT'

  compile group: 'com.neverwinterdp', name: 'commons.elasticsearch', version: '1.0-SNAPSHOT'

  compile group: 'com.neverwinterdp', name: 'queuengin', version: '1.0-SNAPSHOT'
  compile group: 'com.neverwinterdp', name: 'sparkngin', version: '1.0-SNAPSHOT'
  compile group: 'com.neverwinterdp', name: 'demandspike', version: '1.0-SNAPSHOT'
}

test {
  forkEvery = 1
  ignoreFailures = true
  testLogging.showStandardStreams = true

  filter {
    includeTestsMatching "*UnitTest"
  }
}

task release (dependsOn: 'build') << {
  def releaseDir = "${buildDir}/release/NeverwinterDP"
  doRelease(releaseDir) ;
}

task dist(type: Tar, dependsOn: 'release') {
  description = "Tars the bin distribution."
  compression = Compression.GZIP
  from "${buildDir}/release/NeverwinterDP"
}

task vagrant(dependsOn: 'dist')  << {
  def vagrantBuildDir = "${buildDir}/vagrant"
  copy {
    from "vagrant"
    into "${vagrantBuildDir}"
  }

  copy {
    from "${buildDir}/distributions"
    into "${vagrantBuildDir}/vagrant/apps/java"
  }

  copy {
    from "${buildDir}/../../apps"
    into "${vagrantBuildDir}/vagrant/apps"
  }
}

def doRelease(String releaseDir) {
  println "\n\n"
  println "*************************************************"
  println "Preparing the release directory ${releaseDir}"
  println "*************************************************"

  def dependencyJars = [ 
    "commons.utils", "commons.api", "commons.buffer", "commons.yara",  "commons.cluster","commons.netty", 
    "commons.hadoop-framework", "commons.zookeeper", "queuengin", "sparkngin", "demandspike", "commons.elasticsearch",

    "jackson-core-2.4.3", "jackson-databind-2.4.3", "jackson-annotations-2.4.3", "jackson-datatype-protobuf", 
    "jcommander", "reflections", "guava-16.0.1", "javassist",
    'guice', 'javax.inject', 'hazelcast', 'aopalliance',
    "kafka", "scala-library",
    'zookeeper', 'zkclient',
    "netty-all", 'jzlib', 
    'chronicle', "lang-6.4.6", "compiler-2.2.0",
    
    "hadoop-common", "hadoop-hdfs", "hadoop-auth", 
    "hadoop-yarn-api", "hadoop-yarn-common", "hadoop-yarn-client",
    "protobuf",

    "elasticsearch", "lucene",
    
    //codahale metric is required by kafka
    "metrics-core-2.2.0",
    "commons-collections", "commons-configuration","commons-lang3-3.1", "commons-cli",
    "log4j", "slf4j-api", "slf4j-log4j12", "commons-logging"
  ] ;

  println "Copy the dependency library"
  configurations.compile.each { File file -> 
    if(isIn(dependencyJars, file)) {
      println "  Copy $file.name to NeverwinterDP/libs"
      copy {
        from file
        into "${releaseDir}/libs"
      }
    } else {
      //println "Ignore $file.name "
    }
  }

  copy {
    from "${buildDir}/libs"
    into "${releaseDir}/libs"
  }

  println "Copy and override app"
  copy {
    from "src/app"
    into "${releaseDir}"
  }

  println "Copy and override webapp"
  copy {
    from "src/main/webapp"
    into "${releaseDir}/webapp"
  }
}

def isIn(set, File file) {
  for(item in set) {
    if(file.name.startsWith(item)) return true ;
  }
  return false ;
}
